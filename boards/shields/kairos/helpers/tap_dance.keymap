ht: hold_tap {
  // label = "hold_tap";
  compatible = "zmk,behavior-hold-tap";
  #binding-cells = <2>;
  flavor = "tap-preferred";
  tapping-term-ms = <220>;
  quick-tap-ms = <200>;
  bindings = <&kp>, <&kp>;
};

//=======================================================================

// Lower key:
// Hold = Temporary Layer 1, then released when Lower key is released
// Tap  = Layer 1 active, then after next key press Layer 1 is released
// Double Tap = Layer 1 is active and locked
// td_nav_layer: td_nav_layer {
//   compatible = "zmk,behavior-tap-dance";
//   // label = "TAP_DANCE_LAYER";
//   #binding-cells = <0>;
//   tapping-term-ms = <300>;
//   bindings = <&sl 1>, <&to 1>;    // First tap = sticky layer 1, double tap = switch to layer 1; hardcoded not optimal...
// };
// slmo_nav: slmo_nav {
//   compatible = "zmk,behavior-hold-tap";
//   // label = "STICKY_MOMENTARY_LAYER";
//   #binding-cells = <2>;
//   tapping-term-ms = <300>;
//   quick-tap-ms = <0>;
//   flavor = "hold-preferred";
//   bindings = <&mo>, <&td_nav_layer>;  // Hold for momentary, tap for tap-dance behavior ex:&slmo 1 2
// };

// Lower key:
// Hold = Temporary Lower layer, then released when Lower layer is released
// Tap  = sticky Lower is active, then after next key press Lower is released
// Double Tap = Activate Lower layer
// Double Hold = nothing
// Triple Tap = Left Alt is sticky, then after next key press Left Alt is released
// Triple Hold = Left Alt is active while held, then released when Lower layer is released

td_lower_key_third_tap: td_lower_key_third_tap {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    tapping-term-ms = <300>;
    flavor = "tap-preferred";
    bindings = <&kp>, <&sk>; // 2xtap-then-hold = LALT hold, 3xtap = LALT sticky key
};
td_lower_key_second_tap: td_lower_key_second_tap {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    tapping-term-ms = <300>;
    flavor = "tap-preferred";
    bindings = <&mo>, <&to>; // tap-then-hold = nothing, 2xtap = activate layer NAV
};
td_lower_key_first_tap: td_lower_key_first_tap {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    tapping-term-ms = <300>;
    flavor = "tap-preferred";
    bindings = <&mo>, <&sl>; // hold = layer 1 until release, 1xtap = sticky layer NAV
};

td_lower_key: td_lower_key {
  compatible = "zmk,behavior-tap-dance";
  #binding-cells = <0>;
  tapping-term-ms = <300>;
  bindings = <&td_lower_key_first_tap 1 1>, <&td_lower_key_second_tap 3 1>, <&td_lower_key_third_tap LEFT_ALT LEFT_ALT>;
};

//=======================================================================

// Raise key:
// Hold = Temporary Layer 2, then released when Lower key is released
// Tap  = Layer 1 active, then after next key press Layer 1 is released
// Double Tap = Layer 1 is active and locked
// td_func_layer: td_func_layer {
//   compatible = "zmk,behavior-tap-dance";
//   #binding-cells = <0>;
//   tapping-term-ms = <300>;
//   bindings = <&sl 2>, <&to 2>, <&to 4>;    // First tap = sticky layer 2, double tap = switch to layer 2; hardcoded not optimal...
// };
// slmo_func: slmo_func {
//   compatible = "zmk,behavior-hold-tap";
//   #binding-cells = <2>;
//   tapping-term-ms = <300>;
//   quick-tap-ms = <0>;
//   flavor = "hold-preferred";
//   bindings = <&mo>, <&td_func_layer>;  // Hold for momentary, tap for tap-dance behavior ex:&slmo 1 2
// };


// Raise key:
// Hold = Temporary Raise layer, then released when Raise layer is released
// Tap  = sticky Raise is active, then after next key press Raise is released
// Double Tap = Activate Raise layer
// Double Hold = nothing
// Triple Tap = Left Alt is sticky, then after next key press Left Alt is released
// Triple Hold = Left Alt is active while held, then released when Raise layer is released

td_raise_key_third_tap: td_raise_key_third_tap {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    tapping-term-ms = <300>;
    flavor = "tap-preferred";
    bindings = <&mo>, <&to>; // 2xtap-then-hold = Utils layer hold, 3xtap = activate Utils
};
td_raise_key_second_tap: td_raise_key_second_tap {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    tapping-term-ms = <300>;
    flavor = "tap-preferred";
    bindings = <&none>, <&to>; // tap-then-hold = nothing, 2xtap = activate layer NAV
};
td_raise_key_first_tap: td_raise_key_first_tap {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    tapping-term-ms = <300>;
    flavor = "tap-preferred";
    bindings = <&mo>, <&sl>; // hold = layer 2 until release, 1xtap = sticky layer NAV
};

td_raise_key: td_raise_key {
  compatible = "zmk,behavior-tap-dance";
  #binding-cells = <0>;
  tapping-term-ms = <300>;
  bindings = <&td_raise_key_first_tap 2 2>, <&td_raise_key_second_tap 2 2>, <&td_raise_key_third_tap 4 4>;
};

//=======================================================================

// Down key:
// Hold = Temporary Down layer, then released when Down layer is released
// Tap  = sticky Down is active, then after next key press Down is released
// Double Tap = Activate Down layer
// Double Hold = nothing
// // Triple Tap = Left Alt is sticky, then after next key press Left Alt is released
// // Triple Hold = Left Alt is active while held, then released when Down layer is released

// td_down_key_third_tap: td_down_key_third_tap {
//     compatible = "zmk,behavior-hold-tap";
//     #binding-cells = <2>;
//     tapping-term-ms = <300>;
//     flavor = "tap-preferred";
//     bindings = <&mo>, <&to>; // 2xtap-then-hold = Utils layer hold, 3xtap = activate Utils
// };
td_down_key_second_tap: td_down_key_second_tap {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    tapping-term-ms = <300>;
    flavor = "tap-preferred";
    bindings = <&none>, <&to>; // tap-then-hold = nothing, 2xtap = activate layer Symbols
};
td_down_key_first_tap: td_down_key_first_tap {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    tapping-term-ms = <300>;
    flavor = "tap-preferred";
    bindings = <&mo>, <&sl>; // hold = layer 2 until release, 1xtap = sticky layer Symbols
};

td_down_key: td_down_key {
  compatible = "zmk,behavior-tap-dance";
  #binding-cells = <0>;
  tapping-term-ms = <300>;
  bindings = <&td_down_key_first_tap 3 3>, <&td_down_key_second_tap 3 3>;
  // , <&td_down_key_third_tap 4 4>
};

//=======================================================================

// Up key:
// Hold = Temporary Up layer, then released when Up layer is released
// Tap  = sticky Up is active, then after next key press Up is released
// Double Tap = Activate Up layer
// Double Hold = nothing
// // Triple Tap = Left Alt is sticky, then after next key press Left Alt is released
// // Triple Hold = Left Alt is active while held, then released when Up layer is released

// td_up_key_third_tap: td_up_key_third_tap {
//     compatible = "zmk,behavior-hold-tap";
//     #binding-cells = <2>;
//     tapping-term-ms = <300>;
//     flavor = "tap-preferred";
//     bindings = <&mo>, <&to>; // 2xtap-then-hold = Utils layer hold, 3xtap = activate Utils
// };
td_up_key_second_tap: td_up_key_second_tap {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    tapping-term-ms = <300>;
    flavor = "tap-preferred";
    bindings = <&none>, <&to>; // tap-then-hold = nothing, 2xtap = activate layer Utils
};
td_up_key_first_tap: td_up_key_first_tap {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    tapping-term-ms = <300>;
    flavor = "tap-preferred";
    bindings = <&mo>, <&sl>; // hold = layer 2 until release, 1xtap = sticky layer Utils
};

td_up_key: td_up_key {
  compatible = "zmk,behavior-tap-dance";
  #binding-cells = <0>;
  tapping-term-ms = <300>;
  bindings = <&td_up_key_first_tap 4 4>, <&td_up_key_second_tap 4 4>;
  // , <&td_up_key_third_tap 4 4>
};

//=======================================================================

// Left Shift:
// Hold = Temporary Left Shift, then released when Shift key is released
// Tap  = sticky Shift is active, then after next key press Shift is released
// Double Tap = Caps Word is enabled
// Double Hold = While held down LEFT CONTROL is active until released

td_lshift_second_tap: td_lshift_second_tap {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    tapping-term-ms = <300>;
    flavor = "tap-preferred";
    bindings = <&kp>, <&caps_word>; // tap-then-hold, 2xtap
};
td_lshift_first_tap: td_lshift_first_tap {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    tapping-term-ms = <300>;
    flavor = "tap-preferred";
    bindings = <&kp>, <&sk>; // hold, 1xtap
};

td_lshift_caps: td_lshift_caps {
  compatible = "zmk,behavior-tap-dance";
  #binding-cells = <0>;
  tapping-term-ms = <300>;
  bindings = <&td_lshift_first_tap LSHIFT LSHIFT>, <&td_lshift_second_tap LCTRL LCTRL>;
};


///=======================================================================

// Left Semicolon
// Hold = Right GUI
// Tap  = Semicolon (;)
// Double Tap = Colon (:)
// Double Hold = nothing

td_semi_second_tap: td_semi_second_tap {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    tapping-term-ms = <300>;
    flavor = "tap-preferred";
    bindings = <&none>, <&kp>; // tap-then-hold, 2xtap
};
td_semi_first_tap: td_semi_first_tap {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    tapping-term-ms = <300>;
    flavor = "tap-preferred";
    bindings = <&kp>, <&sk>; // hold, 1xtap
};

td_semicolon: td_semicolon {
  compatible = "zmk,behavior-tap-dance";
  #binding-cells = <0>;
  tapping-term-ms = <300>;
  bindings = <&td_semi_first_tap RGUI SEMICOLON>, <&td_semi_second_tap COLON COLON>;
};


//=======================================================================


td_equal: td_equal {
  compatible = "zmk,behavior-tap-dance";
  // label = "TAP_DANCE_EQUAL";
  #binding-cells = <0>;
  tapping-term-ms = <300>;
  bindings = <&kp EQUAL>, <&kp PLUS>;
};

td_semi: td_semi {
  compatible = "zmk,behavior-tap-dance";
  // label = "TAP_DANCE_SEMI";
  #binding-cells = <0>;
  tapping-term-ms = <300>;
  bindings = <&kp SEMICOLON>, <&kp COLON>;
};

td_quote: td_quote {
  compatible = "zmk,behavior-tap-dance";
  // label = "TAP_DANCE_QUOTE";
  #binding-cells = <0>;
  tapping-term-ms = <300>;
  bindings = <&kp SINGLE_QUOTE>, <&kp DOUBLE_QUOTES>;
};

td_comma: td_comma {
  compatible = "zmk,behavior-tap-dance";
  // label = "TAP_DANCE_COMMA";
  #binding-cells = <0>;
  tapping-term-ms = <300>;
  bindings = <&kp COMMA>, <&kp LESS_THAN>;
};

td_period: td_period {
  compatible = "zmk,behavior-tap-dance";
  // label = "TAP_DANCE_PERIOD";
  #binding-cells = <0>;
  tapping-term-ms = <300>;
  bindings = <&kp PERIOD>, <&kp GREATER_THAN>;
};

td_fslash: td_fslash {
  compatible = "zmk,behavior-tap-dance";
  // label = "TAP_DANCE_FSLASH";
  #binding-cells = <0>;
  tapping-term-ms = <300>;
  bindings = <&kp SLASH>, <&kp QUESTION>;
};

td_bslash: td_bslash {
  compatible = "zmk,behavior-tap-dance";
  // label = "TAP_DANCE_BSLASH";
  #binding-cells = <0>;
  tapping-term-ms = <300>;
  bindings = <&kp BACKSLASH>, <&kp PIPE>;
};

//=======================================================================

// td_alt: tab_dance_alt {
//         label = "TAP_DANCE_ALT";
//         compatible = "zmk,behavior-tap-dance";
//         #binding-cells = <0>;
//         tapping-term-ms = <200>;
//         bindings = <&kp LALT>, <&mo NUMBER>;
// };

